package com.jiahehongye.robred.activity;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.graphics.drawable.RoundedBitmapDrawable;
import android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory;
import android.support.v4.view.ViewPager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.request.target.BitmapImageViewTarget;
import com.jiahehongye.robred.BaseActivity;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.fragment.BuyDiamondFragment;
import com.jiahehongye.robred.fragment.FreeFlowerFragment;
import com.jiahehongye.robred.view.MyProgressDialog;
import com.umeng.socialize.UMShareAPI;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class DiamondAccountActivity extends BaseActivity {

    private View label;
    private int mScreenWidth;
    private LinearLayout.LayoutParams params;
    private int mLabelWidth;
    private ArrayList<Fragment> allFragment =new ArrayList<>();
    private Context context = DiamondAccountActivity.this;
    private ViewPager diamond_viewpager;
    private TextView buy_diamond_text,free_flower_text;
    private LinearLayout buy_diamond,free_flower;
    private RelativeLayout zuanshi_back;
    private ImageView diamond_head;
    private ImageView diamond_level;

    private static final int GET_ALL = 0000;

    private Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what){
                case GET_ALL:
                    animDialog.dismiss();
                    String login = (String) msg.obj;
                    try {
                        JSONObject object = new JSONObject(login);
                        if (object.getString("result").equals("success")){
                            JSONObject data = new JSONObject(object.getString("data"));
                            Glide.with(context).load(data.getString("userPhoto")).asBitmap().centerCrop().into(new BitmapImageViewTarget(diamond_head) {
                                @Override
                                protected void setResource(Bitmap resource) {
                                    RoundedBitmapDrawable circularBitmapDrawable =
                                            RoundedBitmapDrawableFactory.create(context.getResources(), resource);
                                    circularBitmapDrawable.setCircular(true);
                                    diamond_head.setImageDrawable(circularBitmapDrawable);
                                }
                            });

                            diamond_name.setText(data.getString("userName"));
                            diamond_num.setText(data.getString("diamond"));
                            flower_num.setText(data.getString("flower"));
                            String level = data.getString("userLevel");
                            if (level.equals("2")){
                                diamond_level.setBackgroundResource(R.mipmap.white_collar);
                            }if (level.equals("3")){
                                diamond_level.setBackgroundResource(R.mipmap.gold_collar);
                            }if (level.equals("4")){
                                diamond_level.setBackgroundResource(R.mipmap.boss);
                            }if (level.equals("5")){
                                diamond_level.setBackgroundResource(R.mipmap.loacl_lord);
                            }if (level.equals("1")){
                                diamond_level.setBackgroundResource(R.mipmap.general);
                            }

                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    break;
            }
        }
    };
    private TextView diamond_name,diamond_num,flower_num;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        applyKitKatTranslucency();
        mTintManager.setStatusBarTintResource(R.color.home_state_color);
        setContentView(R.layout.activity_diamond_account);
        init();
        //获取屏幕宽度
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        mScreenWidth = metrics.widthPixels;

        params = (LinearLayout.LayoutParams)label.getLayoutParams();
        mLabelWidth = params.width = mScreenWidth/2;

        BuyDiamondFragment buyDiamondFragment = new BuyDiamondFragment();
        FreeFlowerFragment freeFlowerFragment = new FreeFlowerFragment();
        allFragment.add(buyDiamondFragment);
        allFragment.add(freeFlowerFragment);

        FragmentAdapter adapter = new FragmentAdapter(getSupportFragmentManager(), allFragment);
        diamond_viewpager.setCurrentItem(0);
        diamond_viewpager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                params.setMargins((int) ((mScreenWidth / 2- mLabelWidth) / 2
                        + mScreenWidth / 2 * (position + positionOffset)), 0, 0, 0);
                label.setLayoutParams(params);
            }

            @Override
            public void onPageSelected(int position) {
                switch (position){
                    case 0:
                        buy_diamond_text.setTextColor(getResources().getColor(R.color.home_state_color));
                        free_flower_text.setTextColor(getResources().getColor(R.color.black));
                        break;
                    case 1:
                        buy_diamond_text.setTextColor(getResources().getColor(R.color.black));
                        free_flower_text.setTextColor(getResources().getColor(R.color.home_state_color));
                        break;
                }

            }

            @Override
            public void onPageScrollStateChanged(int state) {

            }
        });

        params.setMargins((mScreenWidth / 2 - mLabelWidth) / 2, 0, 0, 0);
        label.setLayoutParams(params);
        diamond_viewpager.setAdapter(adapter);
//        if(Build.VERSION.SDK_INT>=23){
//            String[] mPermissionList = new String[]{
//                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
//                    android.Manifest.permission.ACCESS_FINE_LOCATION,
//                    android.Manifest.permission.CALL_PHONE,
//                    android.Manifest.permission.READ_LOGS,
//                    android.Manifest.permission.READ_PHONE_STATE,
//                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
//                    android.Manifest.permission.SET_DEBUG_APP,
//                    android.Manifest.permission.SYSTEM_ALERT_WINDOW,
//                    android.Manifest.permission.GET_ACCOUNTS,
//                    Manifest.permission.WRITE_APN_SETTINGS};
//            ActivityCompat.requestPermissions(DiamondAccountActivity.this,mPermissionList,123);
//        }
    }

    private void init() {
        diamond_level = (ImageView) findViewById(R.id.diamond_level);
        flower_num = (TextView) findViewById(R.id.flower_num);
        diamond_num = (TextView) findViewById(R.id.diamond_num);
        diamond_name = (TextView) findViewById(R.id.diamond_name);
        diamond_head = (ImageView) findViewById(R.id.diamond_head);
        zuanshi_back = (RelativeLayout) findViewById(R.id.zuanshi_back);
        free_flower = (LinearLayout) findViewById(R.id.free_flower);
        buy_diamond = (LinearLayout) findViewById(R.id.buy_diamond);
        label = findViewById(R.id.diamond_label);
        diamond_viewpager = (ViewPager) findViewById(R.id.diamond_viewpager);
        buy_diamond_text = (TextView) findViewById(R.id.buy_diamond_text);
        free_flower_text = (TextView) findViewById(R.id.free_flower_text);

        zuanshi_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        buy_diamond.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                buy_diamond_text.setTextColor(getResources().getColor(R.color.home_state_color));
                free_flower_text.setTextColor(getResources().getColor(R.color.black));
                diamond_viewpager.setCurrentItem(0);
            }
        });

        free_flower.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                buy_diamond_text.setTextColor(getResources().getColor(R.color.black));
                free_flower_text.setTextColor(getResources().getColor(R.color.home_state_color));
                diamond_viewpager.setCurrentItem(1);
            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);

    }

    /**
     * 可滑动Fragment
     */
    class FragmentAdapter extends FragmentPagerAdapter {
        private ArrayList<Fragment> fragments;
        private FragmentManager fm;

        public FragmentAdapter(FragmentManager fm, ArrayList<Fragment> fragments) {
            super(fm);
            this.fm = fm;
            this.fragments = fragments;
        }

        @Override
        public int getItemPosition(Object object) {
            return POSITION_NONE;
        }

        @Override
        public Fragment getItem(int arg0) {
            return fragments.get(arg0);
        }

        @Override
        public int getCount() {
            return fragments == null ? 0 : fragments.size();
        }

        /**
         * 防止数据重复加载
         */
        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {

        }

    }

    /**
     *
     */
    private PersistentCookieStore persistentCookieStore;
    private MyProgressDialog animDialog;
    private Call call;
    private void getdata() {

        showMyDialog();

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(getApplicationContext());
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject jsonObject = new JSONObject();

        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.DIAMOND_ACCOUNT)
                .post(body)
                .build();



        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                DiamondAccountActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(DiamondAccountActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                        animDialog.dismiss();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Log.e("登陆返回：", result);

                Message msg = handler.obtainMessage();
                msg.what = GET_ALL;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });

    }
    /**
     * 显示对话框
     */
    public void showMyDialog(){
        animDialog =new MyProgressDialog(this, "玩命加载中...",R.drawable.loading);
        animDialog.show();
        animDialog.setCancelable(true);
        animDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialogInterface) {
                if(call.isExecuted()){
                    call.cancel();
                }
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        getdata();
    }
}
