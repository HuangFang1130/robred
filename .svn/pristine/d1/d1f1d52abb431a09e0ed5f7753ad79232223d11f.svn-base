package com.jiahehongye.robred.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.jiahehongye.robred.BaseActivity;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.MainActivity;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.utils.DesUtil;
import com.jiahehongye.robred.view.TimeButton;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;
import com.lidroid.xutils.http.client.entity.BodyParamsEntity;

import org.apache.http.entity.StringEntity;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by huangjunhui on 2016/12/9.11:59
 */
public class ResetPasswordActivity extends BaseActivity {

    private String mobile;
    private TextView reset_tv_phone;
    private TimeButton reset_bt_get_code;
    private Button reset_bt_next_step;
    private EditText code;

    private PersistentCookieStore persistentCookieStore;
    private Call call;
    private static final int GET_ALL = 0000;
    private static final int GET_FORGET = 0001;

    private Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what){
                case GET_ALL:
                    String login = (String) msg.obj;
                    try {
                        JSONObject object = new JSONObject(login);
                        if (object.getString("result").equals("success")){
                            Toast.makeText(ResetPasswordActivity.this, "验证码发送成功", Toast.LENGTH_SHORT).show();
                        }else {
                            Toast.makeText(ResetPasswordActivity.this, "网络繁忙", Toast.LENGTH_SHORT).show();
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    break;
                case GET_FORGET:
                    String forget = (String) msg.obj;
                    try {
                        JSONObject object = new JSONObject(forget);

                        if (object.getString("result").equals("success")){
                            Toast.makeText(ResetPasswordActivity.this, "密码重置成功", Toast.LENGTH_SHORT).show();
                            finish();
                        }else {
                            Toast.makeText(ResetPasswordActivity.this, "网络繁忙", Toast.LENGTH_SHORT).show();
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    break;
            }
        }
    };
    private EditText password,again_password;
    private String codeStr;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        applyKitKatTranslucency();
        mTintManager.setStatusBarTintResource(R.color.white);
        setContentView(R.layout.activity_reset_password);

        Bundle bundle = getIntent().getExtras();
        if (bundle!=null){
            mobile = bundle.getString("mobile");
        }

        again_password = (EditText) findViewById(R.id.reset_et_again_password);
        password = (EditText) findViewById(R.id.reset_et_new_password);
        code = (EditText) findViewById(R.id.reset_et_verificy_code);
        reset_bt_next_step = (Button) findViewById(R.id.reset_bt_next_step);
        reset_tv_phone = (TextView) findViewById(R.id.reset_tv_phone);
        reset_bt_get_code = (TimeButton) findViewById(R.id.reset_bt_get_code);

        reset_tv_phone.setText("+86  "+mobile);

        reset_bt_get_code.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rCode();
            }
        });

        reset_bt_next_step.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                codeStr = code.getText().toString();
                String passStr =password.getText().toString();
                String againpassStr = again_password.getText().toString();
                if (TextUtils.isEmpty(codeStr)){
                    Toast.makeText(ResetPasswordActivity.this, "请输入验证码", Toast.LENGTH_SHORT).show();
                    return;
                }
                if (TextUtils.isEmpty(passStr)){
                    Toast.makeText(ResetPasswordActivity.this, "请输入新密码", Toast.LENGTH_SHORT).show();
                    return;
                }
                if (TextUtils.isEmpty(againpassStr)){
                    Toast.makeText(ResetPasswordActivity.this, "请再次输入新密码", Toast.LENGTH_SHORT).show();
                    return;
                }
                if (!BaseActivity.isPassword(passStr)){
                    Toast.makeText(ResetPasswordActivity.this, "请输入6-18位的英文和数字组合", Toast.LENGTH_SHORT).show();
                    return;
                }
                String newDES = DesUtil.encrypt(passStr);
                sendData(newDES);
            }
        });
    }

    private void sendData(String newDES) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(ResetPasswordActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();


        try {
            json.put("mobile", mobile);
            json.put("checkCode", codeStr);
            json.put("password", newDES);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.FORGETPASSWORD_URL)
                .post(body)
                .build();



        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                ResetPasswordActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(ResetPasswordActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();

                Message msg = handler.obtainMessage();
                msg.what = GET_FORGET;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });
    }


    protected void rCode() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(ResetPasswordActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();


        try {
            json.put("mobile", mobile);
        } catch (JSONException e) {
            e.printStackTrace();
        }


        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.MOBILECODE_URL)
                .post(body)
                .build();



        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                ResetPasswordActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(ResetPasswordActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();

                Message msg = handler.obtainMessage();
                msg.what = GET_ALL;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });
    }
}
