package com.jiahehongye.robred.fragment;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.google.gson.Gson;
import com.jiahehongye.robred.BaseFragment;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.activity.ContactActivity;
import com.jiahehongye.robred.activity.DFTTAdvActivity;
import com.jiahehongye.robred.activity.DFTTNewsDetailActivity;
import com.jiahehongye.robred.activity.DiamondAccountActivity;
import com.jiahehongye.robred.activity.GrabRedActivity;
import com.jiahehongye.robred.activity.OneyuanActivity;
import com.jiahehongye.robred.activity.SendRedActivity;
import com.jiahehongye.robred.adapter.HomeHeadFragmentRecycleAdapter;
import com.jiahehongye.robred.bean.DFTTAdvResult;
import com.jiahehongye.robred.bean.DFTTNewsResult;
import com.jiahehongye.robred.bean.DFTTTitleResult;
import com.jiahehongye.robred.bean.HomeFragmentResult;
import com.jiahehongye.robred.biz.HomeTextSwitcherBiz;
import com.jiahehongye.robred.biz.model.HomeBannerBean;
import com.jiahehongye.robred.biz.model.HomeWinningResponse;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.interfaces.MyHeadViewClickListener;
import com.jiahehongye.robred.interfaces.MyItemClickListener;
import com.jiahehongye.robred.utils.LogUtil;
import com.jiahehongye.robred.utils.SPUtils;
import com.jiahehongye.robred.utils.UIUtils;
import com.jiahehongye.robred.view.MyProgressDialog;
import com.songheng.newsapisdk.sdk.apiservice.DFTTAdsApiService;
import com.songheng.newsapisdk.sdk.apiservice.DFTTNewsApiService;
import com.songheng.newsapisdk.sdk.apiservice.listener.DfttApiServiceCallBack;

import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by huangjunhui on 2017/5/18.10:34
 */
public class HomeHeadFragment extends BaseFragment {
    private static final int GET_HOME = 0000;
    private static final int GET_HOME_LIST = 200;
    private static final int GET_ADV = 500;
    private String isup;
    private List<DFTTNewsResult.DataBean> data = new ArrayList<>();
    private String type;
    private String name;
    private RecyclerView mHomeHeadRecycleView;
    private SwipeRefreshLayout mHomeHeadSwiperefresh;
    private int pagerNamber = 1;
    private ArrayList<DFTTNewsResult.DataBean> fatherListDate;
    private boolean isLogin;
    private HomeHeadFragmentRecycleAdapter mHomeRecycleAdapter;
    private PersistentCookieStore persistentCookieStore;
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case GET_HOME:
                    String homefragment = (String) msg.obj;
                    LogUtil.LogShitou("homefragment：   ", homefragment);
                    try {
                        homeFragmentResult = new Gson().fromJson(homefragment, HomeFragmentResult.class);
                    } catch (Exception e) {

                    }
                    mHomeRecycleAdapter.setHeardDate(homeFragmentResult);
                    mHomeHeadRecycleView.setAdapter(mHomeRecycleAdapter);
                    mHomeRecycleAdapter.notifyDataSetChanged();
                    break;

                case GET_HOME_LIST:
//                    if(animDialog.isShowing()){
//                        animDialog.dismiss();
//                    }
                    if (mHomeHeadSwiperefresh != null) {
                        if (mHomeHeadSwiperefresh.isRefreshing()) {
                            mHomeHeadSwiperefresh.setRefreshing(false);
                        }
                    }
                    String result = (String) msg.obj;
                    DFTTNewsResult dfttNewsResult = new Gson().fromJson(result, DFTTNewsResult.class);
                    data = dfttNewsResult.getData();
                    requestAdvDate(pagesdssss);
                    break;

                case GET_ADV:
//                    if (animDialog.isShowing()) {
//                        animDialog.dismiss();
//                    }
                    if (mHomeHeadSwiperefresh != null) {
                        if (mHomeHeadSwiperefresh.isRefreshing()) {
                            mHomeHeadSwiperefresh.setRefreshing(false);
                        }
                    }
                    String result3 = (String) msg.obj;
                    DFTTAdvResult dfttAdvResult = new Gson().fromJson(result3, DFTTAdvResult.class);
                    List<DFTTNewsResult.DataBean> data1 = dfttAdvResult.getData();

                    /**
                     * 遍历最外面的。然后在第几个位置停下来
                     *  取第一个位置的数据放进来
                     */
                    if (data1 != null &&data!=null) {
                        for (int i = 0; i < data.size(); i++) {
                            if (i == 3 || i == 8 || i == 13 || i == 18) {
                                if (data1.size() == 0) {
                                    break;
                                }
                                DFTTNewsResult.DataBean dataBean = data1.get(0);//4个
//                              dataBean.setIsadv("1");//是否是广告
                                if (i == 3 || i == 13) {//大图（1张）   小图（3张的）
//                                DFTTNewsResult.DataBean dataBean = data1.get(0);
                                    dataBean.setBigpic("1");
                                }
                                data.remove(i);//19
                                data.add(i, data1.get(0));
                                data1.remove(0);//移除掉
                                continue;
                            }

                        }


                        fatherListDate.addAll(data);
                        mHomeRecycleAdapter.notifyDataSetChanged();
                    }

                    break;

                case GET_DFBANNER:
                    List bannerList = new ArrayList();
                    DFTTAdvResult banner = (DFTTAdvResult) msg.obj;
                    List<DFTTNewsResult.DataBean> bannerData = banner.getData();
                    for (int i = 0; i < bannerData.size(); i++) {
                        DFTTNewsResult.DataBean item = bannerData.get(i);
                        DFTTNewsResult.DataBean.MiniimgBean imgItem = item.getMiniimg().get(0);
                        String imgPath = imgItem.getSrc(); //图片地址
                        String imgUrl = item.getUrl(); //关联地址
                        String topic = item.getTopic();//标题
                        HomeBannerBean bannerItem = new HomeBannerBean(imgUrl, imgPath, topic);
                        bannerList.add(bannerItem);
                    }
                    mHomeRecycleAdapter.setBannerData(bannerList);
                    mHomeRecycleAdapter.notifyDataSetChanged();
                    break;

                case Constant.RESULT_HOME_WINNING:
                    mHomeRecycleAdapter.setWinningData(((HomeWinningResponse) msg.obj).getData());
                    mHomeRecycleAdapter.notifyDataSetChanged();
                    break;
            }
        }

    };
    private HomeFragmentResult homeFragmentResult;
    private View contentView;
    private LinearLayoutManager linearLayoutManager;
    private MyProgressDialog animDialog;
    private int pagesdssss = 1;
    private static final int GET_DFBANNER = 49;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        contentView = LayoutInflater.from(getActivity()).inflate(R.layout.fragment_head_home, null);

        Bundle arguments = getArguments();
        isup = arguments.getString("isup");
        type = arguments.getString("type");
        name = arguments.getString("name");

        return contentView;
    }

    public static HomeHeadFragment newInstances(DFTTTitleResult.DdBean ddBean) {
        HomeHeadFragment homeHeadFragment = new HomeHeadFragment();
        Bundle args = new Bundle();
        args.putString("isup", ddBean.getIsup());
        args.putString("type", ddBean.getType());
        args.putString("name", ddBean.getName());
        homeHeadFragment.setArguments(args);
        return homeHeadFragment;
    }


    /**
     * 显示对话框
     */
    public void showMyDialog() {
        animDialog = new MyProgressDialog(getActivity(), "玩命加载中...", R.drawable.loading);
        animDialog.show();
        animDialog.setCancelable(true);
        animDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialogInterface) {
//                if (call.isExecuted()) {
//                    call.cancel();
//                }
            }
        });
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);
//        showMyDialog();
        mHomeHeadRecycleView = (RecyclerView) contentView.findViewById(R.id.home_recycleviewddd);
        mHomeHeadSwiperefresh = (SwipeRefreshLayout) contentView.findViewById(R.id.home_swiperefreshlayout);
        getDFTTBanner();
        requestHeadDate();
        requestRobredWinningData();
        pagerNamber = 1;
        requestListDate(pagerNamber, 20);
        fatherListDate = new ArrayList<>();

        linearLayoutManager = new LinearLayoutManager(getActivity());
        mHomeHeadRecycleView.setLayoutManager(linearLayoutManager);


        mHomeHeadSwiperefresh.setColorSchemeResources(R.color.holo_blue_bright, R.color.holo_green_light,
                R.color.holo_orange_light, R.color.holo_red_light);


        mHomeRecycleAdapter = new HomeHeadFragmentRecycleAdapter(mMainUi, fatherListDate);
        mHomeHeadRecycleView.setAdapter(mHomeRecycleAdapter);

        //滑动的监听
        mHomeHeadRecycleView.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    int lastVisiblePosition = linearLayoutManager.findLastVisibleItemPosition();

                    if (linearLayoutManager.getItemCount() <= 1) {
                        return;
                    }
                    if (lastVisiblePosition >= linearLayoutManager.getItemCount() - 1) {
                        if (mHomeRecycleAdapter != null) {
                            mHomeRecycleAdapter.showFootView();
                        }

//                        int i = Integer.parseInt(pagerNamber);
                        pagerNamber++;
//                        pagerNamber = i + "";
                        requestListDate(pagerNamber, 20);

                    }

                }
            }
        });


        //false： 没有登录， true : 登录了
        mHomeRecycleAdapter.setOnItemClickListener(new MyItemClickListener() {
            @Override
            public void onItemClick(View view, int postion) {
//                if (isLogin) {
//                    Intent intent = new Intent(getActivity(), OneyuanProductDetailActivity.class);
//                    intent.putExtra("productId", fatherListDate.get(postion - 1).getProductId() + "");
//                    startActivity(intent);
//                } else {
//                    mMainUi.startLogin();
//                }
                int itemViewType = mHomeRecycleAdapter.getItemViewType(postion + 1);
                if (itemViewType == mHomeRecycleAdapter.ITEM_TYPE_BIG_ADV ||
                        itemViewType == mHomeRecycleAdapter.ITEM_TYPE_ADV) {

                    Intent intent = new Intent(getActivity(), DFTTAdvActivity.class);
                    intent.putExtra("url", fatherListDate.get(postion).getUrl());
                    intent.putExtra("title", fatherListDate.get(postion).getTopic());
                    intent.putExtra("isdownload", fatherListDate.get(postion).getIsdownload());
                    intent.putExtra("isdsp", fatherListDate.get(postion).getIsdsp());
                    intent.putExtra("reporturl", fatherListDate.get(postion).getReporturl());
                    intent.putStringArrayListExtra("clickrep", (ArrayList<String>) fatherListDate.get(postion).getClickrep());
                    intent.putStringArrayListExtra("showrep", (ArrayList<String>) fatherListDate.get(postion).getShowrep());
                    intent.putExtra("position", fatherListDate.get(postion).getIdx());

                    intent.putExtra("type", type);
                    startActivity(intent);
                    return;
                }

                Intent intent = new Intent(getActivity(), DFTTNewsDetailActivity.class);
                intent.putExtra("url", fatherListDate.get(postion).getUrl());
                intent.putExtra("issptopic", fatherListDate.get(postion).getIssptopic());
                intent.putExtra("title", fatherListDate.get(postion).getTopic());
                intent.putExtra("isVideo", fatherListDate.get(postion).getIsvideo());//1 是   0  不是
                intent.putExtra("videolink", fatherListDate.get(postion).getVideo_link());
                intent.putExtra("resource", fatherListDate.get(postion).getSource());
                intent.putExtra("img", fatherListDate.get(postion).getMiniimg().get(0).getSrc());
                intent.putExtra("type", type);
                startActivity(intent);
            }
        });

        mHomeRecycleAdapter.setOnHeadClickListener(new MyHeadViewClickListener() {
            @Override
            public void onHeadClick(View view) {
                switch (view.getId()) {
                    case R.id.home_rl_personal_information://个人中心
                        if (isLogin) {
                            startActivity(new Intent(mMainUi, DiamondAccountActivity.class));
                        } else {
                            mMainUi.startLogin();
                        }
                        break;
                    case R.id.home_rb_grab://抢红包
                        if (isLogin) {
                            Intent intent = new Intent(mMainUi, GrabRedActivity.class);
                            startActivity(intent);
                        } else {
                            mMainUi.startLogin();
                        }
                        break;
                    case R.id.home_rb_send://发红包
                        if (isLogin) {
                            Intent sendIntent = new Intent(mMainUi, SendRedActivity.class);
                            startActivity(sendIntent);
                        } else {
                            mMainUi.startLogin();
                        }

                        break;
                    case R.id.home_rb_find_favorable://找优惠
                        if (isLogin) {

//                            Intent intent = new Intent(getActivity(),TestActivity.class);
//                            startActivity(intent);
//        DFTTApiService.getNumNewsByType(String type, String needNum, String reqNum, final DfttApiServiceCallBack callBack)

//                            Toast.makeText(getActivity(), "敬请期待！" + "", Toast.LENGTH_SHORT).show();


                            Intent intent = new Intent(mMainUi, ContactActivity.class);
                            startActivity(intent);
                        } else {
                            mMainUi.startLogin();
                        }

                        break;
                    case R.id.home_rb_spell_luck://拼手气
                        if (isLogin) {
                            Intent luckyIntent = new Intent(mMainUi, OneyuanActivity.class);
                            startActivity(luckyIntent);
                        } else {
                            mMainUi.startLogin();
                        }

                        break;

                }
            }
        });

        mHomeHeadSwiperefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                if (mHomeRecycleAdapter != null) {
                    fatherListDate.clear();
                    mHomeRecycleAdapter.notifyDataSetChanged();
                    requestListDate(1, -20);
                }

            }
        });

    }

    private void requestListDate(final int page, int index) {
        DFTTNewsApiService.getNewsListByType(type, page, index, new DfttApiServiceCallBack() {
            @Override
            public void onSuccess(String s) {
                LogUtil.LogShitou("新闻数据：", s.toString());
                Message msg = handler.obtainMessage();
                msg.what = GET_HOME_LIST;
                msg.obj = s;
                pagesdssss = page;
                handler.sendMessage(msg);
            }


            @Override
            public void onError(String s, String s1, Response response, Exception e) {

            }
        });


    }

    /**
     * 请求中奖数据接口，放入轮播的textSwitcher内
     */
    private void requestRobredWinningData() {
        HomeTextSwitcherBiz biz = new HomeTextSwitcherBiz(handler);
        biz.getHomeRobredWinning();
    }


    /**
     * 请求头部数据
     */
    private void requestHeadDate() {

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(getActivity());
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject jsonObject = new JSONObject();

        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.HOME_PAGE)
                .post(body)
                .build();


        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                UIUtils.runInMainThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(getActivity(), "网络请求失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Message msg = handler.obtainMessage();
                msg.what = GET_HOME;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });
    }

    public void requestAdvDate(int page) {
        DFTTAdsApiService.getAdvertisement("list", type, null, page + "", new DfttApiServiceCallBack() {
            @Override
            public void onSuccess(String s) {
                LogUtil.LogShitou("广告：", s.toString());
                Message msg = handler.obtainMessage();
                msg.what = GET_ADV;
                msg.obj = s;
                handler.sendMessage(msg);

            }

            @Override
            public void onError(String s, String s1, Response response, Exception e) {

            }
        });

    }


    private void getDFTTBanner() {
        DFTTAdsApiService.getAdvertisement("list", "toutiao", null, "1", new DfttApiServiceCallBack() {
            @Override
            public void onSuccess(String s) {
                DFTTAdvResult banner = new Gson().fromJson(s, DFTTAdvResult.class);
                Message msg = handler.obtainMessage();
                msg.what = GET_DFBANNER;
                msg.obj = banner;
                handler.sendMessage(msg);
            }

            @Override
            public void onError(String s, String s1, Response response, Exception e) {

            }
        });
    }

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);
    }

    @Override
    public void onResume() {
        super.onResume();
        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);

    }
}
