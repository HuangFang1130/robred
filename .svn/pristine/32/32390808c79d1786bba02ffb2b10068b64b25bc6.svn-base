package com.jiahehongye.robred.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.google.gson.Gson;
import com.jiahehongye.robred.BaseFragment;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.activity.ContanctDetailActivity;
import com.jiahehongye.robred.adapter.AddressRecycleAdapter;
import com.jiahehongye.robred.bean.AddressResult;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.interfaces.MyItemClickListener;
import com.jiahehongye.robred.utils.LocationUtils;
import com.jiahehongye.robred.utils.LogUtil;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Administrator on 2016/11/30.
 *
 * 通讯录
 */
public class AddressFragment extends BaseFragment {

    private static final int REQUEST_SUCCESS = 3;
    private SwipeRefreshLayout mAddressSwiperefresh;
    private RecyclerView mAddressRecycle;
    private ArrayList<String> arrayList;
    private LinearLayoutManager linearLayoutManager;
    private AddressRecycleAdapter addressRecycleAdapter;


    private android.os.Handler handler = new android.os.Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case REQUEST_SUCCESS:
                    String result = (String) msg.obj;
                    AddressResult addressResult = new Gson().fromJson(result, AddressResult.class);
                    if(addressResult.getResult().equals("success")){
                        showListDate(result);
                    }else {
                        Toast.makeText(getActivity(), "解析错误", Toast.LENGTH_SHORT).show();
                    }
                    LogUtil.LogShitou("result: " + result.toString());
                    break;
            }
        }
    };
    private List<AddressResult.DataBean> data;
    private List<AddressResult.DataBean> fatherArrayList;

    private void showListDate(String result) {
        AddressResult addressResult = new Gson().fromJson(result, AddressResult.class);
        data = addressResult.getData();
        fatherArrayList.addAll(this.data);
        if(addressRecycleAdapter==null){
            addressRecycleAdapter = new AddressRecycleAdapter(getActivity(),fatherArrayList);
            mAddressRecycle.setAdapter(addressRecycleAdapter);
            //滑动的监听
//            mAddressRecycle.addOnScrollListener(new RecyclerView.OnScrollListener() {
//                @Override
//                public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
//                    super.onScrollStateChanged(recyclerView, newState);
//                    if(newState == RecyclerView.SCROLL_STATE_IDLE){
//                        int lastVisiblePosition = linearLayoutManager.findLastVisibleItemPosition();
//                        if(lastVisiblePosition >= linearLayoutManager.getItemCount()-1){
////                            fatherArrayList.addAll(arrayList);
////                            addressRecycleAdapter.notifyDataSetChanged();
//                        }
//
//                    }
//                }
//            });

            addressRecycleAdapter.setOnItemClickListener(new MyItemClickListener() {
                @Override
                public void onItemClick(View view, int postion) {
                    Intent intent = new Intent(getActivity(), ContanctDetailActivity.class);
                    startActivity(intent);
                }
            });
        }else {
            addressRecycleAdapter.notifyDataSetChanged();
        }

    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        mMainUi.applyKitKatTranslucency();
        mMainUi.mTintManager.setStatusBarTintResource(R.color.home_state_color);
        View view = inflater.from(mMainUi).inflate(R.layout.activity_address,null);
        mAddressSwiperefresh = (SwipeRefreshLayout) view.findViewById(R.id.address_swiperefresh);
        mAddressRecycle = (RecyclerView) view.findViewById(R.id.address_recycleview);
        return view;
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        fatherArrayList = new ArrayList<>();
        requestDate();
        mAddressSwiperefresh.setColorSchemeResources(R.color.holo_blue_bright,R.color.holo_green_light,
                R.color.holo_orange_light, R.color.holo_red_light);
        mAddressSwiperefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                mAddressSwiperefresh.setRefreshing(false);
            }
        });

        linearLayoutManager = new LinearLayoutManager(getActivity());
        mAddressRecycle.setLayoutManager(linearLayoutManager);
        mAddressRecycle.setItemAnimator(new DefaultItemAnimator());

    }

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
        if(!hidden){
            mMainUi.applyKitKatTranslucency();
            mMainUi.mTintManager.setStatusBarTintResource(R.color.home_state_color);
        }
    }

    public void requestDate(){

        LocationUtils instance = LocationUtils.getInstance();
        double latitude = instance.getLatitude();
        double longitude = instance.getLongitude();
        OkHttpClient client = new OkHttpClient.Builder()
                .cookieJar(new CookieJarImpl(new PersistentCookieStore(getActivity())))
                .build();

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("type", 0 + "");
            jsonObject.put("latitude", latitude+"");
            jsonObject.put("longitude", longitude+"");
            jsonObject.put("pageSize", 50+"");
            jsonObject.put("pageNumber", 1+"");

        } catch (JSONException e) {
            e.printStackTrace();
        }
        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.ADDRESS_LIST)
                .post(body)
                .build();


        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(getActivity(), "网络请求失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Message msg = handler.obtainMessage();
                msg.what = REQUEST_SUCCESS;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });

    }
}
