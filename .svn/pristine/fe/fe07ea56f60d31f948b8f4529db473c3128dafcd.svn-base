package com.jiahehongye.robred.oneyuan;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.entity.StringEntity;
import org.json.JSONException;
import org.json.JSONObject;

import com.jiahehongye.robred.BaseActivity;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.R.drawable;
import com.jiahehongye.robred.R.id;
import com.jiahehongye.robred.R.layout;
import com.jiahehongye.robred.R.style;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.utils.DesUtil;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.RequestParams;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.PopupWindow.OnDismissListener;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class OneyuanPayActivity extends BaseActivity implements OnClickListener {

    private TextView mMoney;
    private Button mOk;
    private String money;
    private PopupWindow window;
    private PopupWindow window2;
    private String passwordDes;
    private String productId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(layout.activity_oneyuan_pay);

        Intent intent = getIntent();
        productId = intent.getStringExtra("productId");
        money = intent.getStringExtra("accoRedEnve");

        mMoney = (TextView) findViewById(id.tv_oneyuan_pay_money);
        mMoney.setText(money);

        mOk = (Button) findViewById(id.btn_oneyuan_pay_ok);
        mOk.setOnClickListener(this);

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case id.btn_oneyuan_pay_ok:
                if (Double.parseDouble(money) < 1) {
                    Toast.makeText(this, "红包余额不足", Toast.LENGTH_SHORT).show();
                } else {
                    getMemberInfo();
                }
                break;

            default:
                break;
        }
    }

    public void getMemberInfo() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();

        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.MEMBERINFO)
                .post(body)
                .build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(OneyuanPayActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                final String Infodata = response.body().string();
                Log.e("会员信息==", Infodata);
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (Infodata != null) {
                            try {
                                JSONObject json = new JSONObject(Infodata);
                                String result = json.getString("result");
                                if (result.equals("success")) {
                                    JSONObject jsonob = json.getJSONObject("data");
                                    String setPwd = jsonob.getString("txYezfPass");
                                    if (TextUtils.isEmpty(setPwd)) {
                                        showPopwindow();
                                        backgroundAlpha(0.5f);
                                    } else {
                                        showPopwindow2();
                                        backgroundAlpha(0.5f);
                                    }
                                }
                            } catch (JSONException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }

                        } else {
                            Toast.makeText(getApplicationContext(), "网络请求失败", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }
        });

    }

    public void showPopwindow() {
        // 利用layoutInflater获得View
        LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view = inflater.inflate(layout.payway_popwindow, null);
        view.setBackgroundResource(drawable.paypassword_rec);
        // 下面是两种方法得到宽度和高度 getWindow().getDecorView().getWidth()
        window = new PopupWindow(view, WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT);
        // 设置popWindow弹出窗体可点击，这句话必须添加，并且是true
        window.setFocusable(true);
        // 必须要给调用这个方法，否则点击popWindow以外部分，popWindow不会消失
        // window.setBackgroundDrawable(new BitmapDrawable());
        // 实例化一个ColorDrawable颜色为半透明
        // ColorDrawable dw = new ColorDra

        // 设置popWindow的显示和消失动画
        window.setAnimationStyle(style.mypopwindow_anim_style);
        // 在底部显示
        window.showAtLocation(this.findViewById(id.rl_pay1), Gravity.CENTER, 0, -240);
        // 这里检验popWindow里的button是否可以点击
        Button cancel = (Button) view.findViewById(id.btn_payway_cancel);
        Button commit = (Button) view.findViewById(id.btn_payway_commit);
        final EditText et_xxx = (EditText) view.findViewById(id.et_xxx);
        final TextView one = (TextView) view.findViewById(id.one_point);
        final TextView two = (TextView) view.findViewById(id.two_point);
        final TextView three = (TextView) view.findViewById(id.three_point);
        final TextView four = (TextView) view.findViewById(id.four_point);
        final TextView five = (TextView) view.findViewById(id.five_point);
        final TextView six = (TextView) view.findViewById(id.six_point);
        final List<TextView> list = new ArrayList<TextView>();
        list.add(one);
        list.add(two);
        list.add(three);
        list.add(four);
        list.add(five);
        list.add(six);
        et_xxx.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                // TODO Auto-generated method stub
                int length = s.length();
                one.setVisibility(View.GONE);
                two.setVisibility(View.GONE);
                three.setVisibility(View.GONE);
                four.setVisibility(View.GONE);
                five.setVisibility(View.GONE);
                six.setVisibility(View.GONE);
                for (int i = 0; i < length; i++) {
                    list.get(i).setVisibility(View.VISIBLE);
                }
            }
        });

        openKeyboard(new Handler(), 100);

        cancel.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                window.dismiss();
                backgroundAlpha(1f);
            }

        });

        commit.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (et_xxx.getText().length() == 6) {
                    String password = et_xxx.getText().toString();
                    setPsd(password);
                } else {
                    Toast.makeText(OneyuanPayActivity.this, "密码必须是六位", Toast.LENGTH_SHORT).show();
                }
            }
        });

        // popWindow消失监听方法
        window.setOnDismissListener(new OnDismissListener() {

            @Override
            public void onDismiss() {
                System.out.println("popWindow消失");
            }
        });

    }

    /**
     * 打开软键盘
     */
    private void openKeyboard(Handler mHandler, int s) {
        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);
            }
        }, s);
    }

    /**
     * 设置添加屏幕的背景透明度
     *
     * @param bgAlpha
     */
    public void backgroundAlpha(float bgAlpha) {
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.alpha = bgAlpha; // 0.0-1.0
        getWindow().setAttributes(lp);
    }

    // 设置密码
    public void setPsd(String psd) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();
        try {
            // 给获取到的密码进行加密
            passwordDes = DesUtil.encrypt(psd);
            json.put("payPassword", passwordDes);
        } catch (Exception e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.SETPAYPASSWORD)
                .post(body)
                .build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(OneyuanPayActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                        window.dismiss();
                        backgroundAlpha(1f);
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                final String psdData = response.body().string();
                Log.e("psdData", psdData);
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if (psdData != null) {
                            try {
                                JSONObject json = new JSONObject(psdData);
                                String res = json.getString("result");
                                if (res.equals("success")) {
                                    window.dismiss();
                                    backgroundAlpha(1f);
                                    Toast.makeText(getApplicationContext(), "设置密码成功", Toast.LENGTH_SHORT).show();
                                    // if(TextUtils.isEmpty(isSet)){
                                    // SharedPreferencesUtils.putString(PayWayActivity.this,
                                    // "isPwd", passwordDes);
                                    // }
                                    showPopwindow2();
                                    backgroundAlpha(0.5f);
                                }
                            } catch (JSONException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                        } else {
                            Toast.makeText(OneyuanPayActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }
        });


    }

    public void showPopwindow2() {
        // 利用layoutInflater获得View
        LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View view = inflater.inflate(layout.payway_popwindow2, null);
        view.setBackgroundResource(drawable.paypassword_rec);
        // 下面是两种方法得到宽度和高度 getWindow().getDecorView().getWidth()
        window2 = new PopupWindow(view, WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT);
        // 设置popWindow弹出窗体可点击，这句话必须添加，并且是true
        window2.setFocusable(true);
        // 必须要给调用这个方法，否则点击popWindow以外部分，popWindow不会消失
        // window.setBackgroundDrawable(new BitmapDrawable());
        // 实例化一个ColorDrawable颜色为半透明
        // ColorDrawable dw = new ColorDra

        // 设置popWindow的显示和消失动画
        window2.setAnimationStyle(style.mypopwindow_anim_style);
        // 在底部显示
        window2.showAtLocation(OneyuanPayActivity.this.findViewById(id.rl_pay1), Gravity.TOP, 0, 240);

        // 这里检验popWindow里的button是否可以点击
        Button cancel = (Button) view.findViewById(id.btn_payway_cancel);
        Button commit = (Button) view.findViewById(id.btn_payway_commit);
        final EditText et_xxx = (EditText) view.findViewById(id.et_xxx);
        final TextView one = (TextView) view.findViewById(id.one_point);
        final TextView two = (TextView) view.findViewById(id.two_point);
        final TextView three = (TextView) view.findViewById(id.three_point);
        final TextView four = (TextView) view.findViewById(id.four_point);
        final TextView five = (TextView) view.findViewById(id.five_point);
        final TextView six = (TextView) view.findViewById(id.six_point);
        final List<TextView> list = new ArrayList<TextView>();
        list.add(one);
        list.add(two);
        list.add(three);
        list.add(four);
        list.add(five);
        list.add(six);
        et_xxx.addTextChangedListener(new TextWatcher() {
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                // TODO Auto-generated method stub
                int length = s.length();
                one.setVisibility(View.GONE);
                two.setVisibility(View.GONE);
                three.setVisibility(View.GONE);
                four.setVisibility(View.GONE);
                five.setVisibility(View.GONE);
                six.setVisibility(View.GONE);
                for (int i = 0; i < length; i++) {
                    list.get(i).setVisibility(View.VISIBLE);
                }
            }
        });

        // 打开键盘，设置延时时长
        openKeyboard(new Handler(), 100);

        cancel.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                window2.dismiss();
                backgroundAlpha(1f);
            }

        });

        commit.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (et_xxx.getText().length() == 6) {
                    String password = et_xxx.getText().toString();
                    rePsd(password);

                } else {
                    Toast.makeText(OneyuanPayActivity.this, "密码必须是六位", Toast.LENGTH_SHORT).show();
                }
            }
        });

        // popWindow消失监听方法
        window2.setOnDismissListener(new OnDismissListener() {

            @Override
            public void onDismiss() {
                System.out.println("popWindow消失");
            }
        });

    }

    // 输入密码
    private PersistentCookieStore persistentCookieStore;
    private Call call;

    public void rePsd(final String psd) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();
        try {
            // 给获取到的密码进行加密
            String passwordDes2 = DesUtil.encrypt(psd);
            json.put("payPassword", passwordDes2);
        } catch (Exception e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.CHECKPAYPASSWORD)
                .post(body)
                .build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(OneyuanPayActivity.this, "支付密码验证网络请求失败", Toast.LENGTH_SHORT).show();
                        window2.dismiss();
                        backgroundAlpha(1f);
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                final String reData = response.body().string();
                Log.e("reData = ", reData);
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            JSONObject json2 = new JSONObject(reData);
                            String result = json2.getString("result");
                            if (result.equals("success")) {
                                window2.dismiss();
                                backgroundAlpha(1f);
                                confirm();
                            } else {
                                String error = json2.getString("errorMsg");
                                Toast.makeText(getApplicationContext(), error, Toast.LENGTH_SHORT).show();
                                window2.dismiss();
                                backgroundAlpha(1f);
                            }
                        } catch (JSONException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                });
            }
        });

    }


    private void confirm() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(OneyuanPayActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject json = new JSONObject();
        try {
            // 给获取到的密码进行加密
            json.put("productId", productId);
        } catch (Exception e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(Constant.JSON, json.toString());
        Request request = new Request.Builder()
                .url(Constant.ONEYUANPAY)
                .post(body)
                .build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(OneyuanPayActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                final String reData = response.body().string();
                Log.e("付款结果：", productId + "---" + reData);
                OneyuanPayActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            JSONObject object = new JSONObject(reData);
                            if (object.get("result").equals("success")) {
                                Toast.makeText(OneyuanPayActivity.this, "支付成功", Toast.LENGTH_SHORT).show();
                                finish();
                                startActivity(new Intent(OneyuanPayActivity.this, MyRobListActivity.class));
                            } else if (object.get("result").equals("fail")) {
                                Toast.makeText(OneyuanPayActivity.this, object.getString("errorMsg"),
                                        Toast.LENGTH_SHORT).show();
                            }
                        } catch (JSONException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                });

            }
        });
    }

}
