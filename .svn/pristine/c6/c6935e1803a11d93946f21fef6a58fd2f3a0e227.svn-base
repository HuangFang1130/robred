package com.jiahehongye.robred.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.jiahehongye.robred.BaseActivity;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.utils.DataCleanManager;
import com.jiahehongye.robred.utils.SPUtils;
import com.jiahehongye.robred.utils.UIUtils;

import org.json.JSONObject;

import java.io.File;
import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class SetActivity extends BaseActivity implements View.OnClickListener{

    private static final int LOGOUT_SUCCESS = 201;
    private RelativeLayout mBack;
    private LinearLayout account_safe;
    private LinearLayout help_center;
    private LinearLayout about_us;
    private LinearLayout suggestion;
    private TextView cachesize;
    private LinearLayout clean_;

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what){
                case LOGOUT_SUCCESS:
                    UIUtils.exit();
                    boolean b = new PersistentCookieStore(UIUtils.getContext()).removeAll();
                    SPUtils.clear(UIUtils.getContext());
                    SPUtils.put(UIUtils.getContext(),Constant.LOGOUT,true);
                    SPUtils.put(UIUtils.getContext(),Constant.IS_LOGIN,false);
                    Intent intent = new Intent(SetActivity.this, LoginActivity.class);
                    startActivity(intent);
                    break;
            }

        }
    };
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        applyKitKatTranslucency();
        mTintManager.setStatusBarTintResource(R.color.home_state_color);
        setContentView(R.layout.activity_set);

        init();
        getCacheSize();
    }

    private void cleanCache() {

        cachesize.setText("清空图片缓存(0.0Byte)");
        DataCleanManager.cleanDatabases(UIUtils.getContext());
        DataCleanManager.cleanExternalCache(UIUtils.getContext());
        DataCleanManager.cleanInternalCache(UIUtils.getContext());

        Toast.makeText(getApplicationContext(), "清理成功", Toast.LENGTH_SHORT).show();

    }

    private void getCacheSize() {
        // 获取缓存目录大小。

        File cacheDir = getCacheDir();

        String cacheSize2 = null;
        try {
            cacheSize2 = DataCleanManager.getCacheSize(cacheDir);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        cachesize.setText("清空图片缓存("+cacheSize2+")");
        // 如果这里需要格式化就格式化
    }

    private void init() {
        mBack = (RelativeLayout) findViewById(R.id.setting_rl_back);
        account_safe = (LinearLayout) findViewById(R.id.setting_ll_account_safe);
        help_center = (LinearLayout) findViewById(R.id.setting_ll_help_center);
        about_us = (LinearLayout) findViewById(R.id.setting_ll_aboutus);
        suggestion = (LinearLayout) findViewById(R.id.setting_ll_suggestion);
        cachesize = (TextView) findViewById(R.id.cachesize);
        clean_ = (LinearLayout) findViewById(R.id.clean_);
        LinearLayout log_out = (LinearLayout)findViewById(R.id.setting_ll_logout);

        mBack.setOnClickListener(this);
        account_safe.setOnClickListener(this);
        help_center.setOnClickListener(this);
        about_us.setOnClickListener(this);
        suggestion.setOnClickListener(this);
        log_out.setOnClickListener(this);
        clean_.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cleanCache();
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.setting_rl_back:
                finish();
                break;

            case R.id.setting_ll_help_center:
                startActivity(new Intent(this,HelpCenterActivity.class));
                break;

            case R.id.setting_ll_account_safe:
                startActivity(new Intent(this,AccountSafeActivity.class));
                break;

            case R.id.setting_ll_aboutus:
                startActivity(new Intent(this,AboutUsActivity.class));
                break;

            case R.id.setting_ll_suggestion:
                startActivity(new Intent(this,FeedBackActivity.class));
                break;

            case R.id.setting_ll_logout:
                clearAndLogout();
                break;
        }
    }

    private void clearAndLogout() {

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        PersistentCookieStore  persistentCookieStore = new PersistentCookieStore(SetActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject jsonObject = new JSONObject();

        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.SETTING_LOGOUT)
                .post(body)
                .build();


        Call call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                SetActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(SetActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Message msg = handler.obtainMessage();
                msg.what = LOGOUT_SUCCESS;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });



    }
}
