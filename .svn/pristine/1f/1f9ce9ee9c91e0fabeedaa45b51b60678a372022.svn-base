package com.jiahehongye.robred.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListView;
import android.widget.Toast;

import com.baidu.location.LocationClient;
import com.hyphenate.EMConversationListener;
import com.hyphenate.chat.EMClient;
import com.hyphenate.chat.EMConversation;
import com.hyphenate.easeui.EaseConstant;
import com.jiahehongye.robred.BaseFragment;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.activity.ChatActivity;
import com.jiahehongye.robred.activity.InteractionActivity;
import com.jiahehongye.robred.activity.NotifyActivity;
import com.jiahehongye.robred.adapter.MessageRecycleAdapter;
import com.jiahehongye.robred.interfaces.MyHeadViewClickListener;
import com.jiahehongye.robred.interfaces.MyItemClickListener;
import com.jiahehongye.robred.utils.SPUtils;
import com.jiahehongye.robred.utils.UIUtils;
import com.jiahehongye.robred.view.DividerItemDecoration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2016/11/30.
 * <p/>
 * 消息列表
 */
public class MessageFragment extends BaseFragment {
    private final static int MSG_REFRESH = 2;
    private ListView mMessageListView;
    private SwipeRefreshLayout mMessageSwiperefresh;
    private RecyclerView mMessageRecycle;
    private LinearLayoutManager linearLayoutManager;
    private MessageRecycleAdapter messageRecycleAdapter;
    private ArrayList<String> fatherArrayList;
    private ArrayList<String> arrayList;
    private LocationClient mLocationClient;
    private Map<String, EMConversation> conversations;

    protected Handler handler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                case 0:

                    break;
                case 1:
                    break;

                case MSG_REFRESH: {
                    emConversations.clear();
                    emConversations.addAll(loadConversationList());
                    messageRecycleAdapter.notifyDataSetChanged();
//                    conversationListView.refresh();
                    break;
                }
                default:
                    break;
            }
        }
    };

    protected EMConversationListener convListener = new EMConversationListener() {

        @Override
        public void onCoversationUpdate() {
            refresh();
        }

    };
    private List<EMConversation> emConversations;

    /**
     * 刷新
     */
    private void refresh() {
        if (!handler.hasMessages(MSG_REFRESH)) {
            handler.sendEmptyMessage(MSG_REFRESH);
        }
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {

        mMainUi.applyKitKatTranslucency();
        mMainUi.mTintManager.setStatusBarTintResource(R.color.home_white_color);
        View view = LayoutInflater.from(getActivity()).inflate(R.layout.fragment_message, null);
        mMessageSwiperefresh = (SwipeRefreshLayout) view.findViewById(R.id.message_swiperefreshlayout);
        mMessageRecycle = (RecyclerView) view.findViewById(R.id.message_recycleview);

        return view;
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        emConversations = loadConversationList();
        mMessageSwiperefresh.setColorSchemeResources(R.color.holo_blue_bright, R.color.holo_green_light,
                R.color.holo_orange_light, R.color.holo_red_light);
        mMessageSwiperefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                mMessageSwiperefresh.setRefreshing(false);
            }
        });

        linearLayoutManager = new LinearLayoutManager(getActivity());
        mMessageRecycle.setLayoutManager(linearLayoutManager);
        mMessageRecycle.setItemAnimator(new DefaultItemAnimator());
        mMessageRecycle.addItemDecoration(new DividerItemDecoration(
                getActivity(), DividerItemDecoration.HORIZONTAL_LIST));
        messageRecycleAdapter = new MessageRecycleAdapter(mMainUi, emConversations);
        mMessageRecycle.setAdapter(messageRecycleAdapter);

        messageRecycleAdapter.setOnItemClickListener(new MyItemClickListener() {
            @Override
            public void onItemClick(View view, int postion) {
                Intent intent = new Intent(mMainUi, ChatActivity.class);
                intent.putExtra(EaseConstant.EXTRA_CHAT_TYPE, EaseConstant.CHATTYPE_SINGLE);
                String mobile = (String) SPUtils.get(UIUtils.getContext(), Constant.LOGIN_MOBILE, "");
                if (mobile == "") {
                    Toast.makeText(UIUtils.getContext(), "请先登录！", Toast.LENGTH_SHORT).show();
                }
                intent.putExtra(EaseConstant.EXTRA_USER_ID, "15933434904");
                intent.putExtra("name", "李建涛");
                mMainUi.startActivity(intent);

            }
        });

        //滑动的监听
        mMessageRecycle.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    int lastVisiblePosition = linearLayoutManager.findLastVisibleItemPosition();
                    if (lastVisiblePosition >= linearLayoutManager.getItemCount() - 1) {
                        messageRecycleAdapter.notifyDataSetChanged();
                    }

                }
            }
        });

        messageRecycleAdapter.setOnHeadClickListener(new MyHeadViewClickListener() {
            @Override
            public void onHeadClick(View view) {
                switch (view.getId()) {
                    case R.id.message_interaction://互动消息
                        Intent interactionIntent = new Intent(mMainUi, InteractionActivity.class);
                        startActivity(interactionIntent);
                        break;
                    case R.id.message_system://系统消息
                        Toast.makeText(getActivity(), "系统消息", Toast.LENGTH_SHORT).show();

                        break;
                    case R.id.message_notification://通知消息
                        Intent notifyIntent = new Intent(mMainUi, NotifyActivity.class);
                        startActivity(notifyIntent);
                        break;
                }
            }
        });


    }

    @Override
    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
        if (!hidden) {
            mMainUi.applyKitKatTranslucency();
            mMainUi.mTintManager.setStatusBarTintResource(R.color.home_white_color);
        }
    }


    /**
     * load conversation list
     *
     * @return
    +    */
    protected List<EMConversation> loadConversationList(){
        // get all conversations
        Map<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();
        List<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();
        /**
         * lastMsgTime will change if there is new message during sorting
         * so use synchronized to make sure timestamp of last message won't change.
         */
        synchronized (conversations) {
            for (EMConversation conversation : conversations.values()) {
                if (conversation.getAllMessages().size() != 0) {
                    sortList.add(new Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));
                }
            }
        }
        try {
            // Internal is TimSort algorithm, has bug
            sortConversationByLastChatTime(sortList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        List<EMConversation> list = new ArrayList<EMConversation>();
        for (Pair<Long, EMConversation> sortItem : sortList) {
            list.add(sortItem.second);
        }
        return list;
    }

    /**
     * sort conversations according time stamp of last message
     *
     * @param conversationList
     */
    private void sortConversationByLastChatTime(List<Pair<Long, EMConversation>> conversationList) {
        Collections.sort(conversationList, new Comparator<Pair<Long, EMConversation>>() {
            @Override
            public int compare(final Pair<Long, EMConversation> con1, final Pair<Long, EMConversation> con2) {

                if (con1.first.equals(con2.first)) {
                    return 0;
                } else if (con2.first.longValue() > con1.first.longValue()) {
                    return 1;
                } else {
                    return -1;
                }
            }

        });
    }

    @Override
    public void onResume() {
        super.onResume();
//        messageRecycleAdapter.notifyDataSetChanged();
        refresh();
    }

}
