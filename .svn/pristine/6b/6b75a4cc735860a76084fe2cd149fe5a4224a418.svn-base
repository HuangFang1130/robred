package com.jiahehongye.robred.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import com.google.gson.Gson;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.activity.RedPersonalDetailActivity;
import com.jiahehongye.robred.adapter.GrabMerchantRecycleAdapter;
import com.jiahehongye.robred.bean.GrabMerchantListResult;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.interfaces.MyItemClickListener;
import com.jiahehongye.robred.utils.LogUtil;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by huangjunhui on 2016/12/2.14:07
 */
public class GrabMerchantFragment extends Fragment {

    private static final int GRAB_MERCHANT_LIST = 200;
    private PersistentCookieStore persistentCookieStore;
    private Call call;
    private SwipeRefreshLayout mMerchantSwiperefresh;
    private RecyclerView mMerchantRecycle;
    private List<GrabMerchantListResult.DataBean.SendRedEnveListBean> fatherArrayList;
    private LinearLayoutManager linearLayoutManager;
    private GrabMerchantRecycleAdapter mGrabMerchantRecycleAdapter;
    private String pageNumber = "1";
    private List<GrabMerchantListResult.DataBean.SendRedEnveListBean> grabMerchantList;

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case GRAB_MERCHANT_LIST:
                    String result = (String) msg.obj;
                    GrabMerchantListResult grabMerchantlListResult = new Gson().fromJson(result, GrabMerchantListResult.class);
                    if (grabMerchantlListResult.getResult().equals("success")) {
                        grabMerchantList = grabMerchantlListResult.getData().getSendRedEnveList();
                        fatherArrayList.addAll(grabMerchantList);
                    } else if (grabMerchantlListResult.getResult().equals("fail")) {
                        Toast.makeText(getActivity(), "解析失败", Toast.LENGTH_SHORT).show();
                    }
                    mGrabMerchantRecycleAdapter.hintFootView();
                    mGrabMerchantRecycleAdapter.notifyDataSetChanged();
                    LogUtil.LogShitou("GrabMerchantFragment",result.toString());
                    break;
            }
        }
    };

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = LayoutInflater.from(getActivity()).inflate(R.layout.fragment_grabred_merchant,null);
        mMerchantSwiperefresh = (SwipeRefreshLayout) view.findViewById(R.id.grabred_merchant_swiperefresh);
        mMerchantRecycle = (RecyclerView) view.findViewById(R.id.grabred_merchant_recycleview);
        return view;

    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        pageNumber = "1";
        requestDate(pageNumber);

        mMerchantSwiperefresh.setColorSchemeResources(R.color.holo_blue_bright,R.color.holo_green_light,
                R.color.holo_orange_light, R.color.holo_red_light);
        mMerchantSwiperefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                mMerchantSwiperefresh.setRefreshing(false);
            }
        });

        linearLayoutManager = new LinearLayoutManager(getActivity());
        mMerchantRecycle.setLayoutManager(linearLayoutManager);
        fatherArrayList = new ArrayList<>();

        mGrabMerchantRecycleAdapter = new GrabMerchantRecycleAdapter(getActivity(), fatherArrayList);
        mMerchantRecycle.setAdapter(mGrabMerchantRecycleAdapter);


        //滑动的监听
        mMerchantRecycle.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
                if(newState == RecyclerView.SCROLL_STATE_IDLE){
                    int lastVisiblePosition = linearLayoutManager.findLastVisibleItemPosition();
                    if(linearLayoutManager.getItemCount()<=1){
                        return;
                    }
                    if(lastVisiblePosition >= linearLayoutManager.getItemCount()-1){
                        int i = Integer.parseInt(pageNumber);
                        i++;
                        pageNumber = i+"";
                        requestDate(pageNumber);
                    }

                }
            }
        });

        mGrabMerchantRecycleAdapter.setOnItemClickListener(new MyItemClickListener() {
            @Override
            public void onItemClick(View view, int postion) {
                Intent intent = new Intent(getActivity(),RedPersonalDetailActivity.class);
                startActivity(intent);
            }
        });
    }

    /**
     * 获取个人红包列表
     * @param pageNumber 页数
     */
    private void requestDate(String pageNumber) {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(getActivity());
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("pageSize", "20");
            jsonObject.put("pageNumber", pageNumber);
            jsonObject.put("type", "1");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.GRAB_PERSONURL)
                .post(body)
                .build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                getActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(getActivity(), "网络请求失败", Toast.LENGTH_SHORT).show();
                        if(mGrabMerchantRecycleAdapter!=null){
                            mGrabMerchantRecycleAdapter.hintFootView();
                        }
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Message msg = handler.obtainMessage();
                msg.what = GRAB_MERCHANT_LIST;
                msg.obj = result;
                handler.sendMessage(msg);

            }
        });
    }
}
