package com.jiahehongye.robred.activity;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestCoordinator;
import com.jiahehongye.robred.BaseActivity;
import com.jiahehongye.robred.Constant;
import com.jiahehongye.robred.R;
import com.jiahehongye.robred.bean.PhotoBean;
import com.jiahehongye.robred.cook.CookieJarImpl;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.utils.ActionSheetDialog;
import com.jiahehongye.robred.utils.PUtil;
import com.jiahehongye.robred.utils.UIUtils;
import com.jiahehongye.robred.view.GlideCircleTransform;
import com.jiahehongye.robred.view.MyGridView;
import com.jiahehongye.robred.view.MyProgressDialog;
import com.lling.photopicker.PhotoPickerActivity;
import com.lling.photopicker.beans.Photo;
import com.lling.photopicker.utils.OtherUtils;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class PersonalActivity extends BaseActivity implements View.OnClickListener {

    private PersistentCookieStore persistentCookieStore;
    private ArrayList<PhotoBean> photos = new ArrayList<>();
    private static final int PICK_PHOTO = 1;
    private ArrayList<String> xz = new ArrayList<>();
    private MyGridView photo_grid;
    private MyProgressDialog animDialog;
    private Call call;
    private static final int GET_ALL = 0000;
    private String nickname;
    private List<String> mResults;
    private String job;
    private GridAdapter mAdapter;
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case GET_ALL:
                    animDialog.dismiss();
                    String s = (String) msg.obj;
                    try {
                        JSONObject object = new JSONObject(s);
                        if (object.getString("result").equals("success")) {
                            JSONObject data = new JSONObject(object.getString("data"));
                            Glide.with(PersonalActivity.this).load(data.getString("userPhoto")).transform(new GlideCircleTransform(UIUtils.getContext())).into(mHead);
                            mPhoneNumber.setText(data.getString("mobile"));

                            nickname = data.getString("nickName");
                            job = data.getString("profession");
                            et_name.setText(data.getString("nickName"));
                            xingzuo.setText(data.getString("constellation"));

                            if (data.getString("gender").equals("0")){
                                mSex.setText("保密");
                            }else if (data.getString("gender").equals("1")){
                                mSex.setText("男");
                            }
                            else if (data.getString("gender").equals("2")){
                                mSex.setText("女");
                            }

                            qinggan.setText(data.getString("maritalStatus"));
                            et_job.setText(data.getString("profession"));
                            xueli.setText(data.getString("schoolRecord"));
                            mudi.setText(data.getString("datingPurpose"));
                            et_sign.setText(data.getString("personalDescription"));
                            et_hobby.setText(data.getString("hobbies"));

                            String resList = data.getString("resList");
                            photos = (ArrayList<PhotoBean>) JSON.parseArray(resList,PhotoBean.class);
                            if (photos.size()==1){
                                photo3.setVisibility(View.GONE);
                                photo4.setVisibility(View.GONE);
                                Glide.with(PersonalActivity.this).load(photos.get(0).getPhoto()).asBitmap().into(photo1);
                            }else if (photos.size()==2){
                                photo4.setVisibility(View.GONE);
                                Glide.with(PersonalActivity.this).load(photos.get(0).getPhoto()).asBitmap().into(photo1);
                                Glide.with(PersonalActivity.this).load(photos.get(1).getPhoto()).asBitmap().into(photo2);
                            }else if (photos.size()==3){
                                Glide.with(PersonalActivity.this).load(photos.get(0).getPhoto()).asBitmap().into(photo1);
                                Glide.with(PersonalActivity.this).load(photos.get(1).getPhoto()).asBitmap().into(photo2);
                                Glide.with(PersonalActivity.this).load(photos.get(2).getPhoto()).asBitmap().into(photo3);
                            }else if (photos.size()==4){
                                Glide.with(PersonalActivity.this).load(photos.get(0).getPhoto()).asBitmap().into(photo1);
                                Glide.with(PersonalActivity.this).load(photos.get(1).getPhoto()).asBitmap().into(photo2);
                                Glide.with(PersonalActivity.this).load(photos.get(2).getPhoto()).asBitmap().into(photo3);
                                Glide.with(PersonalActivity.this).load(photos.get(3).getPhoto()).asBitmap().into(photo4);
                            }

                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    break;
            }
        }
    };
    private String sexStr;
    private String ganqingStr;
    private String xzStr;
    private int mColumnWidth;
    private ImageView photo1,photo2,photo3,photo4;
    private ViewGroup.LayoutParams params1,params2,params3,params4;
    private LinearLayout add_photo;
    private TextView personal_ok;
    private ArrayList<String> result;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        applyKitKatTranslucency();
        mTintManager.setStatusBarTintResource(R.color.white);
        setContentView(R.layout.activity_personal);
        int screenWidth = OtherUtils.getWidthInPx(act);
        mColumnWidth = (screenWidth - OtherUtils.dip2px(act, 12))/4;
        xz.add("白羊座");
        xz.add("金牛座");
        xz.add("双子座");
        xz.add("巨蟹座");
        xz.add("狮子座");
        xz.add("处女座");
        xz.add("天秤座");
        xz.add("天蝎座");
        xz.add("射手座");
        xz.add("摩羯座");
        xz.add("水瓶座");
        xz.add("双鱼座");
        initView();
        params1 = photo1.getLayoutParams();
        params2 = photo2.getLayoutParams();
        params3 = photo3.getLayoutParams();
        params4 = photo4.getLayoutParams();
        params1.width = mColumnWidth;
        params1.height = mColumnWidth;
        params2.width = mColumnWidth;
        params2.height = mColumnWidth;
        params3.width = mColumnWidth;
        params3.height = mColumnWidth;
        params4.width = mColumnWidth;
        params4.height = mColumnWidth;
        photo1.setLayoutParams(params1);
        photo2.setLayoutParams(params2);
        photo3.setLayoutParams(params3);
        photo4.setLayoutParams(params4);

    }

    private RelativeLayout mBack;
    private RelativeLayout mCommit;
    private ImageView mHead;
    private TextView mPhoneNumber,mSex;
    private TextView et_name,et_age,et_sign,et_job,et_school,et_more,et_hobby,qinggan,mudi,xueli,xingzuo;
    private void initView() {
        personal_ok = (TextView) findViewById(R.id.personal_ok);
        add_photo = (LinearLayout) findViewById(R.id.add_photo);
        photo1 = (ImageView) findViewById(R.id.photo1);
        photo2 = (ImageView) findViewById(R.id.photo2);
        photo3 = (ImageView) findViewById(R.id.photo3);
        photo4 = (ImageView) findViewById(R.id.photo4);
        mBack = (RelativeLayout) findViewById(R.id.personal_rl_back);
        mCommit = (RelativeLayout) findViewById(R.id.personal_rl_commit);
        mHead = (ImageView) findViewById(R.id.personal_iv_head);
        mPhoneNumber = (TextView) findViewById(R.id.personal_tv_phone_number);
        mSex = (TextView) findViewById(R.id.personal_tv_sex);
        et_name = (TextView) findViewById(R.id.personal_et_name);
        et_sign = (TextView) findViewById(R.id.personal_et_perosonal_sign);
        et_job = (TextView) findViewById(R.id.personal_et_job);
        et_hobby = (TextView) findViewById(R.id.personal_et_hobby);
        qinggan = (TextView) findViewById(R.id.personal_et_perosonal_qinggan);
        mudi = (TextView) findViewById(R.id.personal_et_mudi);
        xueli = (TextView) findViewById(R.id.personal_et_xueli);
        xingzuo = (TextView) findViewById(R.id.personal_tv_xingzuo);

        xingzuo.setOnClickListener(this);
        mBack.setOnClickListener(this);
        mCommit.setOnClickListener(this);
        mHead.setOnClickListener(this);
        mSex.setOnClickListener(this);
        qinggan.setOnClickListener(this);
        personal_ok.setOnClickListener(this);
        et_name.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getApplicationContext(),ChangeNickName.class);
                intent.putExtra("nickname",nickname);
                startActivity(intent);
            }
        });
        et_job.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getApplicationContext(),ChangeJob.class);
                intent.putExtra("job",job);
                startActivity(intent);
            }
        });
        add_photo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(PersonalActivity.this, PhotoPickerActivity.class);
                intent.putExtra(PhotoPickerActivity.EXTRA_SHOW_CAMERA, true);
                intent.putExtra(PhotoPickerActivity.EXTRA_SELECT_MODE, 1);
                intent.putExtra(PhotoPickerActivity.EXTRA_MAX_MUN, 4);
                startActivityForResult(intent, PICK_PHOTO);
            }
        });
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.personal_rl_back:
                finish();
                break;

            case R.id.personal_ok:
                uploadImageToServer();
                break;
            case R.id.personal_tv_xingzuo:
                PUtil.alertBottomWheelOption(PersonalActivity.this, xz, new PUtil.OnWheelViewClick() {
                    @Override
                    public void onClick(View view, int postion) {
                        xzStr = xz.get(postion).toString();
                        changeXz();

                    }
                });
                break;

            case R.id.personal_et_perosonal_qinggan:
                new ActionSheetDialog(PersonalActivity.this).builder().setCancelable(false)
                        .addSheetItem("保密", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                            @Override
                            public void onClick(int which) {
                                ganqingStr = "保密";
                                changeQinggan();
                            }
                        }).addSheetItem("单身", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                    @Override
                    public void onClick(int which) {
                        ganqingStr = "单身";
                        changeQinggan();
                    }
                }).addSheetItem("恋爱中", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                    @Override
                    public void onClick(int which) {
                        ganqingStr = "恋爱中";
                        changeQinggan();
                    }
                }).addSheetItem("已婚", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                    @Override
                    public void onClick(int which) {
                        ganqingStr = "已婚";
                        changeQinggan();
                    }
                }).show();
                break;

            case R.id.personal_rl_commit:
                break;
            case R.id.personal_iv_head:
                break;
            case R.id.personal_tv_sex:
                new ActionSheetDialog(PersonalActivity.this).builder().setCancelable(false)
                        .addSheetItem("保密", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                            @Override
                            public void onClick(int which) {
                                sexStr = "0";
                                changeSex();
                            }
                        }).addSheetItem("男", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                    @Override
                    public void onClick(int which) {
                        sexStr = "1";
                        changeSex();
                    }
                }).addSheetItem("女", ActionSheetDialog.SheetItemColor.Blue, new ActionSheetDialog.OnSheetItemClickListener() {
                    @Override
                    public void onClick(int which) {
                        sexStr = "2";
                        changeSex();
                    }
                }).show();
                break;
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PICK_PHOTO) {
            if (resultCode == RESULT_OK) {
                result = data.getStringArrayListExtra(PhotoPickerActivity.KEY_RESULT);

                if (result.size() == 1) {
                    Glide.with(PersonalActivity.this).load(result.get(0)).asBitmap().into(photo1);
                } else if (result.size() == 2) {
                    Glide.with(PersonalActivity.this).load(result.get(0)).asBitmap().into(photo1);
                    Glide.with(PersonalActivity.this).load(result.get(1)).asBitmap().into(photo2);
                } else if (result.size() == 3) {
                    Glide.with(PersonalActivity.this).load(result.get(0)).asBitmap().into(photo1);
                    Glide.with(PersonalActivity.this).load(result.get(1)).asBitmap().into(photo2);
                    Glide.with(PersonalActivity.this).load(result.get(2)).asBitmap().into(photo3);
                } else if (result.size() == 4) {
                    Glide.with(PersonalActivity.this).load(result.get(0)).asBitmap().into(photo1);
                    Glide.with(PersonalActivity.this).load(result.get(1)).asBitmap().into(photo2);
                    Glide.with(PersonalActivity.this).load(result.get(2)).asBitmap().into(photo3);
                    Glide.with(PersonalActivity.this).load(result.get(3)).asBitmap().into(photo4);
                }
            }
        }
    }


    private static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png");
    private void uploadImageToServer(){

        showMyDialog();
        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);

        for (int i = 0; i < result.size(); i++) {
            File f=new File(result.get(i));
            builder.addFormDataPart("userBatchPhoto", f.getName(), RequestBody.create(MEDIA_TYPE_PNG, f));
        }

        RequestBody requestBody = builder.build();
        Request request = new Request.Builder()
                .url(Constant.CHANGE_MEMBER_INFO)
                .post(requestBody)
                .build();

        OkHttpClient.Builder builder1 = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(PersonalActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder1.cookieJar(cookieJarImpl);
        OkHttpClient client = builder1.build();

        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                animDialog.dismiss();
                PersonalActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(PersonalActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                animDialog.dismiss();
                String result = response.body().string();
                Message msg = handler.obtainMessage();
                msg.what = GET_ALL;
                msg.obj = result;
                handler.sendMessage(msg);

            }
        });
    }
    /**
     *t
     */

    private void getdata() {

        showMyDialog();

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(PersonalActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();

        JSONObject jsonObject = new JSONObject();

        RequestBody body = RequestBody.create(Constant.JSON, jsonObject.toString());
        Request request = new Request.Builder()
                .url(Constant.MEMBERINFO)
                .post(body)
                .build();


        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                PersonalActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(PersonalActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                        animDialog.dismiss();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                Log.e("获取个人全部信息返回：", result);

                Message msg = handler.obtainMessage();
                msg.what = GET_ALL;
                msg.obj = result;
                handler.sendMessage(msg);
            }
        });

    }

    /**
     * 显示对话框
     */
    public void showMyDialog() {
        animDialog = new MyProgressDialog(this, "玩命加载中...", R.drawable.loading);
        animDialog.show();
        animDialog.setCancelable(true);
        animDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
            @Override
            public void onDismiss(DialogInterface dialogInterface) {
                if (call.isExecuted()) {
                    call.cancel();
                }
            }
        });
    }

    @Override
    public void onResume() {
        super.onResume();
        getdata();
    }


    private void changeSex() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(PersonalActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();



        RequestBody formBody = new FormBody.Builder()
                .add("gender", sexStr).build();

        Request request = new Request.Builder()
                .url(Constant.CHANGE_MEMBER_INFO)

                .post(formBody)
                .build();


        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                PersonalActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(PersonalActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                try {
                    JSONObject object = new JSONObject(result);
                    String s = object.getString("result");
                    if (s.equals("success")){
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改成功", Toast.LENGTH_SHORT).show();
                                if (sexStr.equals("0")){
                                    mSex.setText("保密");
                                }else if (sexStr.equals("1")){
                                    mSex.setText("男");
                                }else if (sexStr.equals("2")){
                                    mSex.setText("女");
                                }
                            }
                        });

                    }else {
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改失败", Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }
        });

    }


    private void changeXz() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(PersonalActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();



        RequestBody formBody = new FormBody.Builder()
                .add("constellation", xzStr).build();

        Request request = new Request.Builder()
                .url(Constant.CHANGE_MEMBER_INFO)

                .post(formBody)
                .build();


        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                PersonalActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(PersonalActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                try {
                    JSONObject object = new JSONObject(result);
                    String s = object.getString("result");
                    if (s.equals("success")){
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改成功", Toast.LENGTH_SHORT).show();
                                xingzuo.setText(xzStr);
                            }
                        });

                    }else {
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改失败", Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }
        });

    }

    private void changeQinggan() {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        persistentCookieStore = new PersistentCookieStore(PersonalActivity.this);
        CookieJarImpl cookieJarImpl = new CookieJarImpl(persistentCookieStore);
        builder.cookieJar(cookieJarImpl);
        OkHttpClient client = builder.build();



        RequestBody formBody = new FormBody.Builder()
                .add("maritalStatus", ganqingStr).build();

        Request request = new Request.Builder()
                .url(Constant.CHANGE_MEMBER_INFO)

                .post(formBody)
                .build();


        call = client.newCall(request);
        call.enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                PersonalActivity.this.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(PersonalActivity.this, "网络连接失败", Toast.LENGTH_SHORT).show();
                    }
                });
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                String result = response.body().string();
                try {
                    JSONObject object = new JSONObject(result);
                    String s = object.getString("result");
                    if (s.equals("success")){
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改成功", Toast.LENGTH_SHORT).show();
                                qinggan.setText(ganqingStr);
                            }
                        });

                    }else {
                        PersonalActivity.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                Toast.makeText(PersonalActivity.this, "修改失败", Toast.LENGTH_SHORT).show();
                            }
                        });
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }
        });

    }

    private class GridAdapter extends BaseAdapter {
        private List<String> pathList;

        public GridAdapter(List<String> listUrls) {
            this.pathList = listUrls;
        }

        @Override
        public int getCount() {
            return pathList.size();
        }

        @Override
        public String getItem(int position) {
            return pathList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        public void setPathList(List<String> pathList) {
            this.pathList = pathList;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ImageView imageView;
            if(convertView == null){
                convertView = getLayoutInflater().inflate(R.layout.item_image, null);
                imageView = (ImageView) convertView.findViewById(R.id.imageView);
                convertView.setTag(imageView);
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(mColumnWidth, mColumnWidth);
                imageView.setLayoutParams(params);
            }else {
                imageView = (ImageView) convertView.getTag();
            }
            Glide.with(PersonalActivity.this).load(pathList.get(position)).asBitmap().into(imageView);
            return convertView;
        }
    }
}
