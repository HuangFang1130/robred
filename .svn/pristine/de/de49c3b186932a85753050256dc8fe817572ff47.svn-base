package com.jiahehongye.robred;

import android.*;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.view.KeyEvent;
import android.widget.RadioGroup;

import com.jiahehongye.robred.activity.LoginActivity;
import com.jiahehongye.robred.utils.FragmentFactory;
import com.jiahehongye.robred.utils.SPUtils;
import com.jiahehongye.robred.utils.UIUtils;

public class MainActivity extends BaseActivity implements RadioGroup.OnCheckedChangeListener {

    private RadioGroup mRgRoot;
    private BaseFragment mTempFragment;
    private FragmentFactory instances;
    private long exitTime = 0;
    private boolean isLogin;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setTheme(R.style.AppTheme);
        setContentView(R.layout.activity_main);
        applyKitKatTranslucency();
        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);

        instances = FragmentFactory.getInstances();
        BaseFragment fragment = instances.createFragment(0);

        getSupportFragmentManager().beginTransaction().add(R.id.main_fl_container,fragment).commit();
        mTempFragment = fragment;
        initView();

    }

    private void initView() {
        mRgRoot = (RadioGroup) findViewById(R.id.main_rg_container);
        mRgRoot.setOnCheckedChangeListener(this);
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        BaseFragment fragment = null;
        switch (checkedId){
            case R.id.main_rb_home:
                fragment = instances.createFragment(0);
                break;
            case R.id.main_rb_hot:
                fragment = instances.createFragment(1);
                break;
            case R.id.main_rb_message:
                if(!isLogin){
                    Intent intent  = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    finish();
                    return;
                }
                fragment = instances.createFragment(2);
                break;
            case R.id.main_rb_address:
                if(!isLogin){
                    Intent intent  = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    finish();
                    return;
                }
                fragment = instances.createFragment(3);
                break;
            case R.id.main_rb_personal:
                if(!isLogin){
                    Intent intent  = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    finish();
                    return;
                }
                fragment = instances.createFragment(4);
                break;
        }

        if (fragment != mTempFragment) {
            if (!fragment.isAdded()) {
                getSupportFragmentManager().beginTransaction().hide(mTempFragment)
                        .add(R.id.main_fl_container, fragment).commit();
            } else {
                getSupportFragmentManager().beginTransaction().hide(mTempFragment)
                        .show(fragment).commit();
            }
            mTempFragment = fragment;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        AppHelper.getInstance().logoutHuanXin();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
//        UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);

    }


    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN) {
            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
            builder.setMessage("确认退出吗？");
            builder.setTitle("提示");
            builder.setPositiveButton("确认", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    MainActivity.this.finish();
                }
            });
            builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            builder.create().show();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
}
