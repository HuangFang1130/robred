package com.jiahehongye.robred;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.hyphenate.EMMessageListener;
import com.hyphenate.chat.EMClient;
import com.hyphenate.chat.EMMessage;
import com.jiahehongye.robred.activity.LoginActivity;
import com.jiahehongye.robred.cook.PersistentCookieStore;
import com.jiahehongye.robred.fragment.HomeFragment;
import com.jiahehongye.robred.fragment.MessageFragment;
import com.jiahehongye.robred.fragment.PersonalFragment;
import com.jiahehongye.robred.utils.FragmentFactory;
import com.jiahehongye.robred.utils.NoticeTrigger;
import com.jiahehongye.robred.utils.NoticeTriggerID;
import com.jiahehongye.robred.utils.NoticeTrigger_MGR;
import com.jiahehongye.robred.utils.SPUtils;
import com.jiahehongye.robred.utils.UIUtils;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;
import com.lidroid.xutils.http.client.HttpRequest;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

public class MainActivity extends BaseActivity implements RadioGroup.OnCheckedChangeListener {

    private RadioGroup mRgRoot;
    private BaseFragment mTempFragment;
    private FragmentFactory instances;
    private long exitTime = 0;
    private boolean isLogin;
    private String downLoadURL;

    private Handler handler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {

                case -1:
                    Toast.makeText(MainActivity.this, "网络请求失败", Toast.LENGTH_SHORT).show();
                    break;
                case 0:
                    try {
                        // 获取到服务器返回的时间列表
                        String data = (String) msg.obj;
                        Log.e("自动更新数据:", data);

                        JSONObject jsonObject = new JSONObject(data);
                        String result = jsonObject.getString("result");
                        if (result.equals("success")) {
                            JSONObject object = jsonObject.getJSONObject("data");
                            downLoadURL = object.getString("file");
                            newVersionCode = object.getString("versioncode");
                            // 判断版本号是否一致
                            Log.e("新版本号", newVersionCode);
                            Log.e("老版本号", oldVersionCode + "");
                            Log.e("软件地址", downLoadURL);

                            if (!newVersionCode.equals(oldVersionCode + "")) {
                                Log.e("进入", "===");
                                showNoticeDialog();
                            } else {
//                                Toast.makeText(MainActivity.this, "当前已是最新版本", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } catch (JSONException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    break;

                // 正在下载
                case DOWNLOAD:
                    // 设置进度条位置
                    mProgress.setProgress(progress);
                    break;

                case DOWNLOAD_FINISH:
                    // 安装文件
                    installApk();
                    break;

                default:
//                    Log.i(TAG, "Unhandled msg - " + msg.what);
                    break;
            }
        }

        ;
    };
    private TextView mTvUnreadNumber;
    private boolean flag = true;
    private LocalBroadcastManager broadcastManager;
    private HomeFragment homeFragment;
    private BaseFragment fragment;


    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);
        applyKitKatTranslucency();
        SPUtils.put(UIUtils.getContext(), Constant.FIRST_COMEIN, false);
        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);


        instances = FragmentFactory.getInstances();
        fragment = instances.createFragment(0);

        getSupportFragmentManager().beginTransaction().add(R.id.main_fl_container, fragment).commit();
        mTempFragment = fragment;
        initView();

        checkUpdate();
        registerBroadcastReceiver();

    }

    private void registerBroadcastReceiver() {
        broadcastManager = LocalBroadcastManager.getInstance(this);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(Constant.ACTION_AVATAR_CHANAGED);
        BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {

            @Override
            public void onReceive(Context context, Intent intent) {
                if (mTempFragment instanceof PersonalFragment) {
                    PersonalFragment mTempFragment = (PersonalFragment) MainActivity.this.mTempFragment;
                    mTempFragment.refresh();

                }

            }
        };
        broadcastManager.registerReceiver(broadcastReceiver, intentFilter);
    }

    @Override
    protected void onRestart() {
        super.onRestart();
//        flag = true;
//        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);

    }

    @Override
    protected void onResume() {
        super.onResume();
        //注册消息的监听
        isLogin = (boolean) SPUtils.get(UIUtils.getContext(), Constant.IS_LOGIN, false);
        if (isLogin) {
            EMClient.getInstance().chatManager().addMessageListener(messageListener);
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (isLogin) {
            EMClient.getInstance().chatManager().removeMessageListener(messageListener);
        }
    }

    /**
     * 当收到消息的时候更新数据
     */
    EMMessageListener messageListener = new EMMessageListener() {

        @Override
        public void onMessageReceived(List<EMMessage> messages) {
            boolean b = mTempFragment instanceof MessageFragment;
            if (!b) {
                refreshUIWithMessage();
            }
        }

        @Override
        public void onCmdMessageReceived(List<EMMessage> messages) {

        }

        @Override
        public void onMessageReadAckReceived(List<EMMessage> messages) {
        }

        @Override
        public void onMessageDeliveryAckReceived(List<EMMessage> message) {
        }

        @Override
        public void onMessageChanged(EMMessage message, Object change) {
        }
    };

    private void refreshUIWithMessage() {
        UIUtils.runInMainThread(new Runnable() {
            @Override
            public void run() {
                // refresh unread count
                updateUnreadLabel();

            }
        });
    }

    /**
     * update unread message count
     */
    public void updateUnreadLabel() {
        int count = getUnreadMsgCountTotal();
        if (count > 0) {
            mTvUnreadNumber.setText(String.valueOf(count));
            mTvUnreadNumber.setVisibility(View.VISIBLE);
        } else {
            mTvUnreadNumber.setVisibility(View.INVISIBLE);
        }
    }

    /**
     * get unread message count
     *
     * @return
     */
    public int getUnreadMsgCountTotal() {
        int unreadMsgCountTotal = 0;
//        int chatroomUnreadMsgCount = 0;
        unreadMsgCountTotal = EMClient.getInstance().chatManager().getUnreadMsgsCount();
//        for(EMConversation conversation:EMClient.getInstance().chatManager().getAllConversations().values()){
//            if(conversation.getType() == EMConversation.EMConversationType.ChatRoom)
//                chatroomUnreadMsgCount=chatroomUnreadMsgCount+conversation.getUnreadMsgCount();
//        }
        return unreadMsgCountTotal;
//        return unreadMsgCountTotal-chatroomUnreadMsgCount;
    }

    private void initView() {
        mRgRoot = (RadioGroup) findViewById(R.id.main_rg_container);
        mRgRoot.setOnCheckedChangeListener(this);
        mTvUnreadNumber = (TextView) findViewById(R.id.message_tv_unreade_number);

    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        BaseFragment fragment = null;
//        if (isLogin) {
//            if (flag) {
//                instances.clear();
//                flag = false;
//                return;
//            }
//        }


        switch (checkedId) {
            case R.id.main_rb_home:
                fragment = instances.createFragment(0);
                break;
            case R.id.main_rb_hot:
                fragment = instances.createFragment(1);
                break;
            case R.id.main_rb_message:
                if (!isLogin) {
                    Intent intent = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    return;
                }
                fragment = instances.createFragment(2);
                mTvUnreadNumber.setText("");
                mTvUnreadNumber.setVisibility(View.GONE);
                break;
            case R.id.main_rb_address:
                if (!isLogin) {
                    Intent intent = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    return;
                }
                fragment = instances.createFragment(3);
                break;
            case R.id.main_rb_personal:
                if (!isLogin) {
                    Intent intent = new Intent(this, LoginActivity.class);
                    startActivity(intent);
                    return;
                }
                fragment = instances.createFragment(4);
                break;
        }


        if (fragment != mTempFragment) {
            if (!fragment.isAdded()) {
                getSupportFragmentManager().beginTransaction().hide(mTempFragment)
                        .add(R.id.main_fl_container, fragment).commit();
            } else {
                getSupportFragmentManager().beginTransaction().hide(mTempFragment)
                        .show(fragment).commit();
            }
            mTempFragment = fragment;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        SPUtils.put(UIUtils.getContext(), Constant.IS_LOGIN, false);
        new PersistentCookieStore(UIUtils.getContext()).removeAll();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
//        UMShareAPI.get(this).onActivityResult(requestCode, resultCode, data);

    }


    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN) {
            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
            builder.setMessage("确认退出吗？");
            builder.setTitle("提示");
            builder.setPositiveButton("确认", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    SPUtils.put(UIUtils.getContext(), Constant.IS_LOGIN, false);
                    new PersistentCookieStore(UIUtils.getContext()).removeAll();
//                    MainActivity.this.finish();
                    UIUtils.exit();
                }
            });
            builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            builder.create().show();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    /**
     * 获取软件版本号
     *
     * @param context
     * @return
     */
    private String getVersionCode(Context context) {
        String versionCode = "";
        try {
            // 获取软件版本号，对应AndroidManifest.xml下android:versionCode
            versionCode = context.getPackageManager().getPackageInfo("com.jiahehongye.robred", 0).versionName;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return versionCode;
    }


    private String oldVersionCode;
    private String newVersionCode;

    private void checkUpdate() {

        oldVersionCode = getVersionCode(getApplicationContext()) + "";

        HttpUtils httpUtils = new HttpUtils();
        httpUtils.send(HttpRequest.HttpMethod.GET, Constant.AUTOUPDATE, new RequestCallBack<String>() {

            @Override
            public void onFailure(HttpException arg0, String arg1) {
                // TODO Auto-generated method stub
                Message message = handler.obtainMessage();
                message.what = -1;
                handler.sendMessage(message);
            }

            @Override
            public void onSuccess(ResponseInfo<String> arg0) {
                // TODO Auto-generated method stub
                String data = arg0.result;
                if (data != null) {
                    Message message = handler.obtainMessage();
                    message.obj = data;
                    message.what = 0;
                    handler.sendMessage(message);

                }
            }
        });

    }

    /**
     * 显示软件更新对话框
     */
    private void showNoticeDialog() {
        // 构造对话框
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("软件更新");
        builder.setMessage("软件有重大更新，如有出现应用未安装情况，请卸载当前版本，并去各大APP商店下载，立即更新吗？");
        // 更新
        builder.setPositiveButton("更新", new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                // 显示下载对话框
                showDownloadDialog();
            }
        });
        // 稍后更新
        builder.setNegativeButton("稍后更新", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        Dialog noticeDialog = builder.create();
        noticeDialog.show();
    }

    /**
     * 显示软件下载对话框
     */
    /* 更新进度条 */
    private ProgressBar mProgress;
    private Dialog mDownloadDialog;
    /* 是否取消更新 */
    private boolean cancelUpdate = false;

    private void showDownloadDialog() {
        // 构造软件下载对话框
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("正在更新");
        // 给下载对话框增加进度条
        final LayoutInflater inflater = LayoutInflater.from(MainActivity.this);
        View v = inflater.inflate(R.layout.softupdate_progress, null);
        mProgress = (ProgressBar) v.findViewById(R.id.update_progress);
        builder.setView(v);
        // 取消更新
        builder.setNegativeButton("取消更新", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        mDownloadDialog = builder.create();
        mDownloadDialog.show();
        // 下载文件
        downloadApk();
    }

    /**
     * 下载apk文件
     */
    private void downloadApk() {
        // 启动新线程下载软件
        new downloadApkThread().start();
    }

    /**
     * 下载文件线程
     *
     * @author dingliping
     * @date 2016-2-22
     */
    /* 下载保存路径 */
    private String mSavePath;
    /* 记录进度条数量 */
    private int progress;
    /* 下载中 */
    private static final int DOWNLOAD = 111;
    /* 下载结束 */
    private static final int DOWNLOAD_FINISH = 222;

    private class downloadApkThread extends Thread {
        @Override
        public void run() {
            try {
                // 判断SD卡是否存在，并且是否具有读写权限
                if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                    // 获得存储卡的路径
                    String sdpath = Environment.getExternalStorageDirectory() + "/";
                    mSavePath = sdpath + "download";
                    URL url = new URL(downLoadURL);
                    // 创建连接
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.connect();
                    // 获取文件大小
                    int length = conn.getContentLength();
                    // 创建输入流
                    InputStream is = conn.getInputStream();

                    File file = new File(mSavePath);
                    // 判断文件目录是否存在
                    if (!file.exists()) {
                        file.mkdir();
                    }
                    File apkFile = new File(mSavePath, "jinhoubao" + newVersionCode + ".apk");
                    FileOutputStream fos = new FileOutputStream(apkFile);
                    int count = 0;
                    // 缓存
                    byte buf[] = new byte[1024];
                    // 写入到文件中
                    do {
                        int numread = is.read(buf);
                        count += numread;
                        // 计算进度条位置
                        progress = (int) (((float) count / length) * 100);
                        // 更新进度
                        handler.sendEmptyMessage(DOWNLOAD);
                        if (numread <= 0) {
                            // 下载完成
                            handler.sendEmptyMessage(DOWNLOAD_FINISH);
                            break;
                        }
                        // 写入文件
                        fos.write(buf, 0, numread);
                    } while (!cancelUpdate);// 点击取消就停止下载.
                    fos.close();
                    is.close();
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            // 取消下载对话框显示
            mDownloadDialog.dismiss();
        }
    }

    ;


    /**
     * 安装APK文件
     */
    private void installApk() {
        File apkfile = new File(mSavePath, "jinhoubao" + newVersionCode + ".apk");
        if (!apkfile.exists()) {
            return;
        }

        NoticeTrigger trigger = new NoticeTrigger();
        trigger.setTriggerID(NoticeTriggerID.JUMP_TO_MAIN);
        NoticeTrigger_MGR.Instance().notifyTopicbserver(trigger);


        // 通过Intent安装APK文件
        Intent i = new Intent(Intent.ACTION_VIEW);
        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        i.setDataAndType(Uri.parse("file://" + apkfile.toString()), "application/vnd.android.package-archive");
        MainActivity.this.startActivity(i);
    }


}
